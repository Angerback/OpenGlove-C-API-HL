/* myService.h
   Generated by wsdl2h 2.8.36 from http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/?wsdl and typemap.dat
   2016-11-01 23:42:19 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on myService.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri.org/"
ns2 = "http://tempuri.org/Imports"
ns3 = "http://schemas.microsoft.com/2003/10/Serialization/"
ns4 = "http://schemas.datacontract.org/2004/07/OpenGloveWCF"
ns5 = "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/Imports"
//gsoap ns2   schema namespace:	http://tempuri.org/Imports
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://schemas.microsoft.com/2003/10/Serialization/"
//gsoap ns3   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/
//gsoap ns3   schema form:	qualified

#define SOAP_NAMESPACE_OF_ns4	"http://schemas.datacontract.org/2004/07/OpenGloveWCF"
//gsoap ns4   schema namespace:	http://schemas.datacontract.org/2004/07/OpenGloveWCF
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns5	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
//gsoap ns5   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/Arrays
//gsoap ns5   schema elementForm:	qualified
//gsoap ns5   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:anyType".
class xsd__anyType { _XML __item; struct soap *soap; };

/// Built-in XSD type "xs:QName".
typedef std::string xsd__QName;

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
	struct soap *soap;
};

/// Built-in XSD type "xs:byte".
typedef char xsd__byte;

/// Built-in XSD type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/// Primitive built-in type "xs:ID".
typedef std::string xsd__ID;

/// Class wrapper for built-in type "xs:ID" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__ID_ to check runtime type (see soapStub.h).
class xsd__ID_ : public xsd__anyType
{ public:
    xsd__ID                              __item;                       
};

/// Primitive built-in type "xs:IDREF".
typedef std::string xsd__IDREF;

/// Class wrapper for built-in type "xs:IDREF" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__IDREF_ to check runtime type (see soapStub.h).
class xsd__IDREF_ : public xsd__anyType
{ public:
    xsd__IDREF                           __item;                       
};

/// Class wrapper for built-in type "xs:QName" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__QName_ to check runtime type (see soapStub.h).
class xsd__QName_ : public xsd__anyType
{ public:
    xsd__QName                           __item;                       
};

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__anyURI_ to check runtime type (see soapStub.h).
class xsd__anyURI_ : public xsd__anyType
{ public:
    xsd__anyURI                          __item;                       
};

/// Class wrapper for built-in type "xs:base64Binary" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__base64Binary_ to check runtime type (see soapStub.h).
class xsd__base64Binary_ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item;                       
};

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__boolean to check runtime type (see soapStub.h).
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Class wrapper for built-in type "xs:byte" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__byte_ to check runtime type (see soapStub.h).
class xsd__byte_ : public xsd__anyType
{ public:
    xsd__byte                            __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__dateTime to check runtime type (see soapStub.h).
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;

/// Class wrapper for built-in type "xs:decimal" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__decimal_ to check runtime type (see soapStub.h).
class xsd__decimal_ : public xsd__anyType
{ public:
    xsd__decimal                         __item;                       
};

/// Class wrapper for built-in type "xs:double" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__double to check runtime type (see soapStub.h).
class xsd__double : public xsd__anyType
{ public:
    double                               __item;                       
};

/// Primitive built-in type "xs:duration".
typedef std::string xsd__duration;

/// Class wrapper for built-in type "xs:duration" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__duration_ to check runtime type (see soapStub.h).
class xsd__duration_ : public xsd__anyType
{ public:
    xsd__duration                        __item;                       
};

/// Class wrapper for built-in type "xs:float" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__float to check runtime type (see soapStub.h).
class xsd__float : public xsd__anyType
{ public:
    float                                __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__int to check runtime type (see soapStub.h).
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Class wrapper for built-in type "xs:long" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__long to check runtime type (see soapStub.h).
class xsd__long : public xsd__anyType
{ public:
    LONG64                               __item;                       
};

/// Class wrapper for built-in type "xs:short" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__short to check runtime type (see soapStub.h).
class xsd__short : public xsd__anyType
{ public:
    short                                __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__string to check runtime type (see soapStub.h).
class xsd__string : public xsd__anyType
{ public:
    std::string                          __item;                       
};

/// Class wrapper for built-in type "xs:unsignedByte" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedByte_ to check runtime type (see soapStub.h).
class xsd__unsignedByte_ : public xsd__anyType
{ public:
    xsd__unsignedByte                    __item;                       
};

/// Class wrapper for built-in type "xs:unsignedInt" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedInt to check runtime type (see soapStub.h).
class xsd__unsignedInt : public xsd__anyType
{ public:
    unsigned int                         __item;                       
};

/// Class wrapper for built-in type "xs:unsignedLong" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedLong to check runtime type (see soapStub.h).
class xsd__unsignedLong : public xsd__anyType
{ public:
    ULONG64                              __item;                       
};

/// Class wrapper for built-in type "xs:unsignedShort" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedShort to check runtime type (see soapStub.h).
class xsd__unsignedShort : public xsd__anyType
{ public:
    unsigned short                       __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _ns1__GetGloves.
class _ns1__GetGloves;

//  Forward declaration of class _ns1__GetGlovesResponse.
class _ns1__GetGlovesResponse;

//  Forward declaration of class _ns1__RefreshGloves.
class _ns1__RefreshGloves;

//  Forward declaration of class _ns1__RefreshGlovesResponse.
class _ns1__RefreshGlovesResponse;

//  Forward declaration of class _ns1__SaveGlove.
class _ns1__SaveGlove;

//  Forward declaration of class _ns1__SaveGloveResponse.
class _ns1__SaveGloveResponse;

//  Forward declaration of class _ns1__Activate.
class _ns1__Activate;

//  Forward declaration of class _ns1__ActivateResponse.
class _ns1__ActivateResponse;

//  Forward declaration of class _ns1__Connect.
class _ns1__Connect;

//  Forward declaration of class _ns1__ConnectResponse.
class _ns1__ConnectResponse;

//  Forward declaration of class _ns1__Disconnect.
class _ns1__Disconnect;

//  Forward declaration of class _ns1__DisconnectResponse.
class _ns1__DisconnectResponse;

//  Forward declaration of class _ns1__ActivateMany.
class _ns1__ActivateMany;

//  Forward declaration of class _ns1__ActivateManyResponse.
class _ns1__ActivateManyResponse;

//  Forward declaration of class ns4__ArrayOfGlove.
class ns4__ArrayOfGlove;

//  Forward declaration of class ns4__Glove.
class ns4__Glove;

//  Forward declaration of class ns4__Glove_x002eConfiguration.
class ns4__Glove_x002eConfiguration;

//  Forward declaration of class ns4__Glove_x002eConfiguration_x002eProfile.
class ns4__Glove_x002eConfiguration_x002eProfile;

//  Forward declaration of class ns5__ArrayOfint.
class ns5__ArrayOfint;

//  Forward declaration of class ns5__ArrayOfKeyValueOfstringstring.
class ns5__ArrayOfKeyValueOfstringstring;

//  Forward declaration of class ns5__ArrayOfstring.
class ns5__ArrayOfstring;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/OpenGloveWCF                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/":char is a simpleType restriction of XSD type xs:int.
///
typedef int ns3__char;

/// @brief A class wrapper.
///
class ns3__char__ : public xsd__anyType
{ public:
    ns3__char                            __item;                       
};

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/":duration is a simpleType restriction of XSD type xs:duration.
///
/// Content pattern is "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?".
/// Value range is -P10675199DT2H48M5.4775808S to P10675199DT2H48M5.4775807S.
typedef xsd__duration ns3__duration "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?";

/// @brief A class wrapper.
///
class ns3__duration__ : public xsd__anyType
{ public:
    ns3__duration                        __item;                       
};

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/":guid is a simpleType restriction of XSD type xs:string.
///
/// Content pattern is "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}".
typedef std::string ns3__guid "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}";

/// @brief A class wrapper.
///
class ns3__guid__ : public xsd__anyType
{ public:
    ns3__guid                            __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/OpenGloveWCF                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Side is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "ns4__Side__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns4__Side
{
	ns4__Side__Right,	///< xs:string value="Right"
	ns4__Side__Left,	///< xs:string value="Left"
};

/// @brief A class wrapper.
///
class ns4__Side_ : public xsd__anyType
{ public:
    enum ns4__Side                       __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://tempuri.org/":GetGloves
/// @brief "http://tempuri.org/":GetGloves is a complexType.
///
/// class _ns1__GetGloves operations:
/// - _ns1__GetGloves* soap_new__ns1__GetGloves(soap*) allocate and default initialize
/// - _ns1__GetGloves* soap_new__ns1__GetGloves(soap*, int num) allocate array and default initialize values
/// - _ns1__GetGloves* soap_new_req__ns1__GetGloves(soap*, ...) allocate, set required members
/// - _ns1__GetGloves* soap_new_set__ns1__GetGloves(soap*, ...) allocate, set all public members
/// - _ns1__GetGloves::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetGloves(soap*, _ns1__GetGloves*) deserialize from a stream
/// - int soap_write__ns1__GetGloves(soap*, _ns1__GetGloves*) serialize to a stream
/// - _ns1__GetGloves* _ns1__GetGloves::soap_dup(soap*) returns deep copy of _ns1__GetGloves, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetGloves::soap_del() deep deletes _ns1__GetGloves data members, use only after _ns1__GetGloves::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetGloves
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetGlovesResponse
/// @brief "http://tempuri.org/":GetGlovesResponse is a complexType.
///
/// class _ns1__GetGlovesResponse operations:
/// - _ns1__GetGlovesResponse* soap_new__ns1__GetGlovesResponse(soap*) allocate and default initialize
/// - _ns1__GetGlovesResponse* soap_new__ns1__GetGlovesResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetGlovesResponse* soap_new_req__ns1__GetGlovesResponse(soap*, ...) allocate, set required members
/// - _ns1__GetGlovesResponse* soap_new_set__ns1__GetGlovesResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetGlovesResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetGlovesResponse(soap*, _ns1__GetGlovesResponse*) deserialize from a stream
/// - int soap_write__ns1__GetGlovesResponse(soap*, _ns1__GetGlovesResponse*) serialize to a stream
/// - _ns1__GetGlovesResponse* _ns1__GetGlovesResponse::soap_dup(soap*) returns deep copy of _ns1__GetGlovesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetGlovesResponse::soap_del() deep deletes _ns1__GetGlovesResponse data members, use only after _ns1__GetGlovesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetGlovesResponse
{ public:
/// Element "GetGlovesResult" of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":ArrayOfGlove.
    ns4__ArrayOfGlove*                   GetGlovesResult                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":RefreshGloves
/// @brief "http://tempuri.org/":RefreshGloves is a complexType.
///
/// class _ns1__RefreshGloves operations:
/// - _ns1__RefreshGloves* soap_new__ns1__RefreshGloves(soap*) allocate and default initialize
/// - _ns1__RefreshGloves* soap_new__ns1__RefreshGloves(soap*, int num) allocate array and default initialize values
/// - _ns1__RefreshGloves* soap_new_req__ns1__RefreshGloves(soap*, ...) allocate, set required members
/// - _ns1__RefreshGloves* soap_new_set__ns1__RefreshGloves(soap*, ...) allocate, set all public members
/// - _ns1__RefreshGloves::soap_default(soap*) default initialize members
/// - int soap_read__ns1__RefreshGloves(soap*, _ns1__RefreshGloves*) deserialize from a stream
/// - int soap_write__ns1__RefreshGloves(soap*, _ns1__RefreshGloves*) serialize to a stream
/// - _ns1__RefreshGloves* _ns1__RefreshGloves::soap_dup(soap*) returns deep copy of _ns1__RefreshGloves, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RefreshGloves::soap_del() deep deletes _ns1__RefreshGloves data members, use only after _ns1__RefreshGloves::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RefreshGloves
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":RefreshGlovesResponse
/// @brief "http://tempuri.org/":RefreshGlovesResponse is a complexType.
///
/// class _ns1__RefreshGlovesResponse operations:
/// - _ns1__RefreshGlovesResponse* soap_new__ns1__RefreshGlovesResponse(soap*) allocate and default initialize
/// - _ns1__RefreshGlovesResponse* soap_new__ns1__RefreshGlovesResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__RefreshGlovesResponse* soap_new_req__ns1__RefreshGlovesResponse(soap*, ...) allocate, set required members
/// - _ns1__RefreshGlovesResponse* soap_new_set__ns1__RefreshGlovesResponse(soap*, ...) allocate, set all public members
/// - _ns1__RefreshGlovesResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__RefreshGlovesResponse(soap*, _ns1__RefreshGlovesResponse*) deserialize from a stream
/// - int soap_write__ns1__RefreshGlovesResponse(soap*, _ns1__RefreshGlovesResponse*) serialize to a stream
/// - _ns1__RefreshGlovesResponse* _ns1__RefreshGlovesResponse::soap_dup(soap*) returns deep copy of _ns1__RefreshGlovesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__RefreshGlovesResponse::soap_del() deep deletes _ns1__RefreshGlovesResponse data members, use only after _ns1__RefreshGlovesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__RefreshGlovesResponse
{ public:
/// Element "RefreshGlovesResult" of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":ArrayOfGlove.
    ns4__ArrayOfGlove*                   RefreshGlovesResult            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":SaveGlove
/// @brief "http://tempuri.org/":SaveGlove is a complexType.
///
/// class _ns1__SaveGlove operations:
/// - _ns1__SaveGlove* soap_new__ns1__SaveGlove(soap*) allocate and default initialize
/// - _ns1__SaveGlove* soap_new__ns1__SaveGlove(soap*, int num) allocate array and default initialize values
/// - _ns1__SaveGlove* soap_new_req__ns1__SaveGlove(soap*, ...) allocate, set required members
/// - _ns1__SaveGlove* soap_new_set__ns1__SaveGlove(soap*, ...) allocate, set all public members
/// - _ns1__SaveGlove::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SaveGlove(soap*, _ns1__SaveGlove*) deserialize from a stream
/// - int soap_write__ns1__SaveGlove(soap*, _ns1__SaveGlove*) serialize to a stream
/// - _ns1__SaveGlove* _ns1__SaveGlove::soap_dup(soap*) returns deep copy of _ns1__SaveGlove, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SaveGlove::soap_del() deep deletes _ns1__SaveGlove data members, use only after _ns1__SaveGlove::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SaveGlove
{ public:
/// Element "glove" of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove.
    ns4__Glove*                          glove                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":SaveGloveResponse
/// @brief "http://tempuri.org/":SaveGloveResponse is a complexType.
///
/// class _ns1__SaveGloveResponse operations:
/// - _ns1__SaveGloveResponse* soap_new__ns1__SaveGloveResponse(soap*) allocate and default initialize
/// - _ns1__SaveGloveResponse* soap_new__ns1__SaveGloveResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__SaveGloveResponse* soap_new_req__ns1__SaveGloveResponse(soap*, ...) allocate, set required members
/// - _ns1__SaveGloveResponse* soap_new_set__ns1__SaveGloveResponse(soap*, ...) allocate, set all public members
/// - _ns1__SaveGloveResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SaveGloveResponse(soap*, _ns1__SaveGloveResponse*) deserialize from a stream
/// - int soap_write__ns1__SaveGloveResponse(soap*, _ns1__SaveGloveResponse*) serialize to a stream
/// - _ns1__SaveGloveResponse* _ns1__SaveGloveResponse::soap_dup(soap*) returns deep copy of _ns1__SaveGloveResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SaveGloveResponse::soap_del() deep deletes _ns1__SaveGloveResponse data members, use only after _ns1__SaveGloveResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SaveGloveResponse
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":Activate
/// @brief "http://tempuri.org/":Activate is a complexType.
///
/// class _ns1__Activate operations:
/// - _ns1__Activate* soap_new__ns1__Activate(soap*) allocate and default initialize
/// - _ns1__Activate* soap_new__ns1__Activate(soap*, int num) allocate array and default initialize values
/// - _ns1__Activate* soap_new_req__ns1__Activate(soap*, ...) allocate, set required members
/// - _ns1__Activate* soap_new_set__ns1__Activate(soap*, ...) allocate, set all public members
/// - _ns1__Activate::soap_default(soap*) default initialize members
/// - int soap_read__ns1__Activate(soap*, _ns1__Activate*) deserialize from a stream
/// - int soap_write__ns1__Activate(soap*, _ns1__Activate*) serialize to a stream
/// - _ns1__Activate* _ns1__Activate::soap_dup(soap*) returns deep copy of _ns1__Activate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Activate::soap_del() deep deletes _ns1__Activate data members, use only after _ns1__Activate::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Activate
{ public:
/// Element "gloveAddress" of XSD type xs:string.
    std::string*                         gloveAddress                   0;	///< Optional element.
/// Element "actuator" of XSD type xs:int.
    int*                                 actuator                       0;	///< Optional element.
/// Element "intensity" of XSD type xs:int.
    int*                                 intensity                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":ActivateResponse
/// @brief "http://tempuri.org/":ActivateResponse is a complexType.
///
/// class _ns1__ActivateResponse operations:
/// - _ns1__ActivateResponse* soap_new__ns1__ActivateResponse(soap*) allocate and default initialize
/// - _ns1__ActivateResponse* soap_new__ns1__ActivateResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ActivateResponse* soap_new_req__ns1__ActivateResponse(soap*, ...) allocate, set required members
/// - _ns1__ActivateResponse* soap_new_set__ns1__ActivateResponse(soap*, ...) allocate, set all public members
/// - _ns1__ActivateResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ActivateResponse(soap*, _ns1__ActivateResponse*) deserialize from a stream
/// - int soap_write__ns1__ActivateResponse(soap*, _ns1__ActivateResponse*) serialize to a stream
/// - _ns1__ActivateResponse* _ns1__ActivateResponse::soap_dup(soap*) returns deep copy of _ns1__ActivateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ActivateResponse::soap_del() deep deletes _ns1__ActivateResponse data members, use only after _ns1__ActivateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ActivateResponse
{ public:
/// Element "ActivateResult" of XSD type xs:int.
    int*                                 ActivateResult                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":Connect
/// @brief "http://tempuri.org/":Connect is a complexType.
///
/// class _ns1__Connect operations:
/// - _ns1__Connect* soap_new__ns1__Connect(soap*) allocate and default initialize
/// - _ns1__Connect* soap_new__ns1__Connect(soap*, int num) allocate array and default initialize values
/// - _ns1__Connect* soap_new_req__ns1__Connect(soap*, ...) allocate, set required members
/// - _ns1__Connect* soap_new_set__ns1__Connect(soap*, ...) allocate, set all public members
/// - _ns1__Connect::soap_default(soap*) default initialize members
/// - int soap_read__ns1__Connect(soap*, _ns1__Connect*) deserialize from a stream
/// - int soap_write__ns1__Connect(soap*, _ns1__Connect*) serialize to a stream
/// - _ns1__Connect* _ns1__Connect::soap_dup(soap*) returns deep copy of _ns1__Connect, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Connect::soap_del() deep deletes _ns1__Connect data members, use only after _ns1__Connect::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Connect
{ public:
/// Element "gloveAddress" of XSD type xs:string.
    std::string*                         gloveAddress                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":ConnectResponse
/// @brief "http://tempuri.org/":ConnectResponse is a complexType.
///
/// class _ns1__ConnectResponse operations:
/// - _ns1__ConnectResponse* soap_new__ns1__ConnectResponse(soap*) allocate and default initialize
/// - _ns1__ConnectResponse* soap_new__ns1__ConnectResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ConnectResponse* soap_new_req__ns1__ConnectResponse(soap*, ...) allocate, set required members
/// - _ns1__ConnectResponse* soap_new_set__ns1__ConnectResponse(soap*, ...) allocate, set all public members
/// - _ns1__ConnectResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ConnectResponse(soap*, _ns1__ConnectResponse*) deserialize from a stream
/// - int soap_write__ns1__ConnectResponse(soap*, _ns1__ConnectResponse*) serialize to a stream
/// - _ns1__ConnectResponse* _ns1__ConnectResponse::soap_dup(soap*) returns deep copy of _ns1__ConnectResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ConnectResponse::soap_del() deep deletes _ns1__ConnectResponse data members, use only after _ns1__ConnectResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ConnectResponse
{ public:
/// Element "ConnectResult" of XSD type xs:int.
    int*                                 ConnectResult                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":Disconnect
/// @brief "http://tempuri.org/":Disconnect is a complexType.
///
/// class _ns1__Disconnect operations:
/// - _ns1__Disconnect* soap_new__ns1__Disconnect(soap*) allocate and default initialize
/// - _ns1__Disconnect* soap_new__ns1__Disconnect(soap*, int num) allocate array and default initialize values
/// - _ns1__Disconnect* soap_new_req__ns1__Disconnect(soap*, ...) allocate, set required members
/// - _ns1__Disconnect* soap_new_set__ns1__Disconnect(soap*, ...) allocate, set all public members
/// - _ns1__Disconnect::soap_default(soap*) default initialize members
/// - int soap_read__ns1__Disconnect(soap*, _ns1__Disconnect*) deserialize from a stream
/// - int soap_write__ns1__Disconnect(soap*, _ns1__Disconnect*) serialize to a stream
/// - _ns1__Disconnect* _ns1__Disconnect::soap_dup(soap*) returns deep copy of _ns1__Disconnect, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Disconnect::soap_del() deep deletes _ns1__Disconnect data members, use only after _ns1__Disconnect::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Disconnect
{ public:
/// Element "gloveAddress" of XSD type xs:string.
    std::string*                         gloveAddress                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":DisconnectResponse
/// @brief "http://tempuri.org/":DisconnectResponse is a complexType.
///
/// class _ns1__DisconnectResponse operations:
/// - _ns1__DisconnectResponse* soap_new__ns1__DisconnectResponse(soap*) allocate and default initialize
/// - _ns1__DisconnectResponse* soap_new__ns1__DisconnectResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DisconnectResponse* soap_new_req__ns1__DisconnectResponse(soap*, ...) allocate, set required members
/// - _ns1__DisconnectResponse* soap_new_set__ns1__DisconnectResponse(soap*, ...) allocate, set all public members
/// - _ns1__DisconnectResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DisconnectResponse(soap*, _ns1__DisconnectResponse*) deserialize from a stream
/// - int soap_write__ns1__DisconnectResponse(soap*, _ns1__DisconnectResponse*) serialize to a stream
/// - _ns1__DisconnectResponse* _ns1__DisconnectResponse::soap_dup(soap*) returns deep copy of _ns1__DisconnectResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DisconnectResponse::soap_del() deep deletes _ns1__DisconnectResponse data members, use only after _ns1__DisconnectResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DisconnectResponse
{ public:
/// Element "DisconnectResult" of XSD type xs:int.
    int*                                 DisconnectResult               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":ActivateMany
/// @brief "http://tempuri.org/":ActivateMany is a complexType.
///
/// class _ns1__ActivateMany operations:
/// - _ns1__ActivateMany* soap_new__ns1__ActivateMany(soap*) allocate and default initialize
/// - _ns1__ActivateMany* soap_new__ns1__ActivateMany(soap*, int num) allocate array and default initialize values
/// - _ns1__ActivateMany* soap_new_req__ns1__ActivateMany(soap*, ...) allocate, set required members
/// - _ns1__ActivateMany* soap_new_set__ns1__ActivateMany(soap*, ...) allocate, set all public members
/// - _ns1__ActivateMany::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ActivateMany(soap*, _ns1__ActivateMany*) deserialize from a stream
/// - int soap_write__ns1__ActivateMany(soap*, _ns1__ActivateMany*) serialize to a stream
/// - _ns1__ActivateMany* _ns1__ActivateMany::soap_dup(soap*) returns deep copy of _ns1__ActivateMany, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ActivateMany::soap_del() deep deletes _ns1__ActivateMany data members, use only after _ns1__ActivateMany::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ActivateMany
{ public:
/// Element "gloveAddress" of XSD type xs:string.
    std::string*                         gloveAddress                   0;	///< Optional element.
/// Element "actuators" of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint.
    ns5__ArrayOfint*                     actuators                      0;	///< Optional element.
/// Element "intensityList" of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint.
    ns5__ArrayOfint*                     intensityList                  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":ActivateManyResponse
/// @brief "http://tempuri.org/":ActivateManyResponse is a complexType.
///
/// class _ns1__ActivateManyResponse operations:
/// - _ns1__ActivateManyResponse* soap_new__ns1__ActivateManyResponse(soap*) allocate and default initialize
/// - _ns1__ActivateManyResponse* soap_new__ns1__ActivateManyResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ActivateManyResponse* soap_new_req__ns1__ActivateManyResponse(soap*, ...) allocate, set required members
/// - _ns1__ActivateManyResponse* soap_new_set__ns1__ActivateManyResponse(soap*, ...) allocate, set all public members
/// - _ns1__ActivateManyResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ActivateManyResponse(soap*, _ns1__ActivateManyResponse*) deserialize from a stream
/// - int soap_write__ns1__ActivateManyResponse(soap*, _ns1__ActivateManyResponse*) serialize to a stream
/// - _ns1__ActivateManyResponse* _ns1__ActivateManyResponse::soap_dup(soap*) returns deep copy of _ns1__ActivateManyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ActivateManyResponse::soap_del() deep deletes _ns1__ActivateManyResponse data members, use only after _ns1__ActivateManyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ActivateManyResponse
{ public:
/// Element "ActivateManyResult" of XSD type xs:int.
    int*                                 ActivateManyResult             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.datacontract.org/2004/07/OpenGloveWCF                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.datacontract.org/2004/07/OpenGloveWCF":ArrayOfGlove is a complexType.
///
/// class ns4__ArrayOfGlove operations:
/// - ns4__ArrayOfGlove* soap_new_ns4__ArrayOfGlove(soap*) allocate and default initialize
/// - ns4__ArrayOfGlove* soap_new_ns4__ArrayOfGlove(soap*, int num) allocate array and default initialize values
/// - ns4__ArrayOfGlove* soap_new_req_ns4__ArrayOfGlove(soap*, ...) allocate, set required members
/// - ns4__ArrayOfGlove* soap_new_set_ns4__ArrayOfGlove(soap*, ...) allocate, set all public members
/// - ns4__ArrayOfGlove::soap_default(soap*) default initialize members
/// - int soap_read_ns4__ArrayOfGlove(soap*, ns4__ArrayOfGlove*) deserialize from a stream
/// - int soap_write_ns4__ArrayOfGlove(soap*, ns4__ArrayOfGlove*) serialize to a stream
/// - ns4__ArrayOfGlove* ns4__ArrayOfGlove::soap_dup(soap*) returns deep copy of ns4__ArrayOfGlove, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__ArrayOfGlove::soap_del() deep deletes ns4__ArrayOfGlove data members, use only after ns4__ArrayOfGlove::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__ArrayOfGlove : public xsd__anyType
{ public:
/// Vector of ns4__Glove* of length 0..unbounded.
    std::vector<ns4__Glove*            > Glove                          0;
};

/// @brief "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove is a complexType.
///
/// class ns4__Glove operations:
/// - ns4__Glove* soap_new_ns4__Glove(soap*) allocate and default initialize
/// - ns4__Glove* soap_new_ns4__Glove(soap*, int num) allocate array and default initialize values
/// - ns4__Glove* soap_new_req_ns4__Glove(soap*, ...) allocate, set required members
/// - ns4__Glove* soap_new_set_ns4__Glove(soap*, ...) allocate, set all public members
/// - ns4__Glove::soap_default(soap*) default initialize members
/// - int soap_read_ns4__Glove(soap*, ns4__Glove*) deserialize from a stream
/// - int soap_write_ns4__Glove(soap*, ns4__Glove*) serialize to a stream
/// - ns4__Glove* ns4__Glove::soap_dup(soap*) returns deep copy of ns4__Glove, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__Glove::soap_del() deep deletes ns4__Glove data members, use only after ns4__Glove::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__Glove : public xsd__anyType
{ public:
/// Element "BluetoothAddress" of XSD type xs:string.
    std::string*                         BluetoothAddress               0;	///< Optional element.
/// Element "Connected" of XSD type xs:boolean.
    bool*                                Connected                      0;	///< Optional element.
/// Element "GloveConfiguration" of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove.Configuration.
    ns4__Glove_x002eConfiguration*       GloveConfiguration             0;	///< Optional element.
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element "Port" of XSD type xs:string.
    std::string*                         Port                           0;	///< Optional element.
/// Element "Side" of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Side.
    enum ns4__Side*                      Side                           0;	///< Optional element.
};

/// @brief "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove.Configuration is a complexType.
///
/// class ns4__Glove_x002eConfiguration operations:
/// - ns4__Glove_x002eConfiguration* soap_new_ns4__Glove_x002eConfiguration(soap*) allocate and default initialize
/// - ns4__Glove_x002eConfiguration* soap_new_ns4__Glove_x002eConfiguration(soap*, int num) allocate array and default initialize values
/// - ns4__Glove_x002eConfiguration* soap_new_req_ns4__Glove_x002eConfiguration(soap*, ...) allocate, set required members
/// - ns4__Glove_x002eConfiguration* soap_new_set_ns4__Glove_x002eConfiguration(soap*, ...) allocate, set all public members
/// - ns4__Glove_x002eConfiguration::soap_default(soap*) default initialize members
/// - int soap_read_ns4__Glove_x002eConfiguration(soap*, ns4__Glove_x002eConfiguration*) deserialize from a stream
/// - int soap_write_ns4__Glove_x002eConfiguration(soap*, ns4__Glove_x002eConfiguration*) serialize to a stream
/// - ns4__Glove_x002eConfiguration* ns4__Glove_x002eConfiguration::soap_dup(soap*) returns deep copy of ns4__Glove_x002eConfiguration, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__Glove_x002eConfiguration::soap_del() deep deletes ns4__Glove_x002eConfiguration data members, use only after ns4__Glove_x002eConfiguration::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__Glove_x002eConfiguration : public xsd__anyType
{ public:
/// Element "AllowedBaudRates" of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint.
    ns5__ArrayOfint*                     AllowedBaudRates               0;	///< Optional element.
/// Element "BaudRate" of XSD type xs:int.
    int*                                 BaudRate                       0;	///< Optional element.
/// Element "GloveHash" of XSD type xs:string.
    std::string*                         GloveHash                      0;	///< Optional element.
/// Element "GloveName" of XSD type xs:string.
    std::string*                         GloveName                      0;	///< Optional element.
/// Element "GloveProfile" of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove.Configuration.Profile.
    ns4__Glove_x002eConfiguration_x002eProfile*  GloveProfile                   0;	///< Optional element.
/// Element "NegativeInit" of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    ns5__ArrayOfstring*                  NegativeInit                   0;	///< Optional element.
/// Element "NegativePins" of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint.
    ns5__ArrayOfint*                     NegativePins                   0;	///< Optional element.
/// Element "PositiveInit" of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    ns5__ArrayOfstring*                  PositiveInit                   0;	///< Optional element.
/// Element "PositivePins" of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint.
    ns5__ArrayOfint*                     PositivePins                   0;	///< Optional element.
};

/// @brief "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove.Configuration.Profile is a complexType.
///
/// class ns4__Glove_x002eConfiguration_x002eProfile operations:
/// - ns4__Glove_x002eConfiguration_x002eProfile* soap_new_ns4__Glove_x002eConfiguration_x002eProfile(soap*) allocate and default initialize
/// - ns4__Glove_x002eConfiguration_x002eProfile* soap_new_ns4__Glove_x002eConfiguration_x002eProfile(soap*, int num) allocate array and default initialize values
/// - ns4__Glove_x002eConfiguration_x002eProfile* soap_new_req_ns4__Glove_x002eConfiguration_x002eProfile(soap*, ...) allocate, set required members
/// - ns4__Glove_x002eConfiguration_x002eProfile* soap_new_set_ns4__Glove_x002eConfiguration_x002eProfile(soap*, ...) allocate, set all public members
/// - ns4__Glove_x002eConfiguration_x002eProfile::soap_default(soap*) default initialize members
/// - int soap_read_ns4__Glove_x002eConfiguration_x002eProfile(soap*, ns4__Glove_x002eConfiguration_x002eProfile*) deserialize from a stream
/// - int soap_write_ns4__Glove_x002eConfiguration_x002eProfile(soap*, ns4__Glove_x002eConfiguration_x002eProfile*) serialize to a stream
/// - ns4__Glove_x002eConfiguration_x002eProfile* ns4__Glove_x002eConfiguration_x002eProfile::soap_dup(soap*) returns deep copy of ns4__Glove_x002eConfiguration_x002eProfile, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__Glove_x002eConfiguration_x002eProfile::soap_del() deep deletes ns4__Glove_x002eConfiguration_x002eProfile data members, use only after ns4__Glove_x002eConfiguration_x002eProfile::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__Glove_x002eConfiguration_x002eProfile : public xsd__anyType
{ public:
/// Element "AreaCount" of XSD type xs:int.
    int*                                 AreaCount                      0;	///< Optional element.
/// Element "GloveHash" of XSD type xs:string.
    std::string*                         GloveHash                      0;	///< Optional element.
/// Element "Mappings" of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring.
    ns5__ArrayOfKeyValueOfstringstring*  Mappings                       0;	///< Optional element.
/// Element "ProfileName" of XSD type xs:string.
    std::string*                         ProfileName                    0;	///< Optional element.
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint is a complexType.
///
/// class ns5__ArrayOfint operations:
/// - ns5__ArrayOfint* soap_new_ns5__ArrayOfint(soap*) allocate and default initialize
/// - ns5__ArrayOfint* soap_new_ns5__ArrayOfint(soap*, int num) allocate array and default initialize values
/// - ns5__ArrayOfint* soap_new_req_ns5__ArrayOfint(soap*, ...) allocate, set required members
/// - ns5__ArrayOfint* soap_new_set_ns5__ArrayOfint(soap*, ...) allocate, set all public members
/// - ns5__ArrayOfint::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ArrayOfint(soap*, ns5__ArrayOfint*) deserialize from a stream
/// - int soap_write_ns5__ArrayOfint(soap*, ns5__ArrayOfint*) serialize to a stream
/// - ns5__ArrayOfint* ns5__ArrayOfint::soap_dup(soap*) returns deep copy of ns5__ArrayOfint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ArrayOfint::soap_del() deep deletes ns5__ArrayOfint data members, use only after ns5__ArrayOfint::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ArrayOfint : public xsd__anyType
{ public:
/// Vector of int of length 0..unbounded.
    std::vector<int                    > int_                           0;
};

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring is a complexType.
///
/// class ns5__ArrayOfKeyValueOfstringstring operations:
/// - ns5__ArrayOfKeyValueOfstringstring* soap_new_ns5__ArrayOfKeyValueOfstringstring(soap*) allocate and default initialize
/// - ns5__ArrayOfKeyValueOfstringstring* soap_new_ns5__ArrayOfKeyValueOfstringstring(soap*, int num) allocate array and default initialize values
/// - ns5__ArrayOfKeyValueOfstringstring* soap_new_req_ns5__ArrayOfKeyValueOfstringstring(soap*, ...) allocate, set required members
/// - ns5__ArrayOfKeyValueOfstringstring* soap_new_set_ns5__ArrayOfKeyValueOfstringstring(soap*, ...) allocate, set all public members
/// - ns5__ArrayOfKeyValueOfstringstring::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ArrayOfKeyValueOfstringstring(soap*, ns5__ArrayOfKeyValueOfstringstring*) deserialize from a stream
/// - int soap_write_ns5__ArrayOfKeyValueOfstringstring(soap*, ns5__ArrayOfKeyValueOfstringstring*) serialize to a stream
/// - ns5__ArrayOfKeyValueOfstringstring* ns5__ArrayOfKeyValueOfstringstring::soap_dup(soap*) returns deep copy of ns5__ArrayOfKeyValueOfstringstring, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ArrayOfKeyValueOfstringstring::soap_del() deep deletes ns5__ArrayOfKeyValueOfstringstring data members, use only after ns5__ArrayOfKeyValueOfstringstring::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ArrayOfKeyValueOfstringstring : public xsd__anyType
{ public:
/// Vector of KeyValueOfstringstring of length 0..unbounded.
    std::vector<
/// class _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring operations:
/// - _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring* soap_new__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap*) allocate and default initialize
/// - _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring* soap_new__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap*, int num) allocate array and default initialize values
/// - _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring* soap_new_req__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap*, ...) allocate, set required members
/// - _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring* soap_new_set__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap*, ...) allocate, set all public members
/// - _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_default(soap*) default initialize members
/// - int soap_read__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap*, _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring*) deserialize from a stream
/// - int soap_write__ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring(soap*, _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring*) serialize to a stream
/// - _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring* _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_dup(soap*) returns deep copy of _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_del() deep deletes _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring data members, use only after _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns5__ArrayOfKeyValueOfstringstring_KeyValueOfstringstring
    {
/// Element "Key" of XSD type xs:string.
    std::string*                         Key                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "Value" of XSD type xs:string.
    std::string*                         Value                          1;	///< Optional (xsi:nil when NULL) element.
    }>                                  *KeyValueOfstringstring         0;
};

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring is a complexType.
///
/// class ns5__ArrayOfstring operations:
/// - ns5__ArrayOfstring* soap_new_ns5__ArrayOfstring(soap*) allocate and default initialize
/// - ns5__ArrayOfstring* soap_new_ns5__ArrayOfstring(soap*, int num) allocate array and default initialize values
/// - ns5__ArrayOfstring* soap_new_req_ns5__ArrayOfstring(soap*, ...) allocate, set required members
/// - ns5__ArrayOfstring* soap_new_set_ns5__ArrayOfstring(soap*, ...) allocate, set all public members
/// - ns5__ArrayOfstring::soap_default(soap*) default initialize members
/// - int soap_read_ns5__ArrayOfstring(soap*, ns5__ArrayOfstring*) deserialize from a stream
/// - int soap_write_ns5__ArrayOfstring(soap*, ns5__ArrayOfstring*) serialize to a stream
/// - ns5__ArrayOfstring* ns5__ArrayOfstring::soap_dup(soap*) returns deep copy of ns5__ArrayOfstring, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns5__ArrayOfstring::soap_del() deep deletes ns5__ArrayOfstring data members, use only after ns5__ArrayOfstring::soap_dup(NULL) (use soapcpp2 -Ed)
class ns5__ArrayOfstring : public xsd__anyType
{ public:
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > string                         0;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyType of XSD type xs:anyType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyURI of XSD type xs:anyURI.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":base64Binary of XSD type xs:base64Binary.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":boolean of XSD type xs:boolean.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":byte of XSD type xs:byte.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":dateTime of XSD type xs:dateTime.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":decimal of XSD type xs:decimal.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":double of XSD type xs:double.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":float of XSD type xs:float.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":int of XSD type xs:int.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":long of XSD type xs:long.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":QName of XSD type xs:QName.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":short of XSD type xs:short.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":string of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedByte of XSD type xs:unsignedByte.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedInt of XSD type xs:unsignedInt.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedLong of XSD type xs:unsignedLong.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedShort of XSD type xs:unsignedShort.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":char of XSD type "http://schemas.microsoft.com/2003/10/Serialization/":char.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":duration of XSD type "http://schemas.microsoft.com/2003/10/Serialization/":duration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":guid of XSD type "http://schemas.microsoft.com/2003/10/Serialization/":guid.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":FactoryType of simpleType xs:QName.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Id of simpleType xs:ID.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Ref of simpleType xs:IDREF.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.datacontract.org/2004/07/OpenGloveWCF                     *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/OpenGloveWCF":ArrayOfGlove of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":ArrayOfGlove.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove.Configuration of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove.Configuration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove.Configuration.Profile of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Glove.Configuration.Profile.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Side of XSD type "http://schemas.datacontract.org/2004/07/OpenGloveWCF":Side.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.datacontract.org/2004/07/OpenGloveWCF                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfint.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfKeyValueOfstringstring.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring of XSD type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	BasicHttpBinding_USCOREIOGService 
//gsoap ns1  service type:	IOGService 
//gsoap ns1  service port:	http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/ 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage OGService Definitions

@section OGService_bindings Service Bindings

  - @ref BasicHttpBinding_USCOREIOGService

@section OGService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BasicHttpBinding_USCOREIOGService Binding "BasicHttpBinding_USCOREIOGService"

@section BasicHttpBinding_USCOREIOGService_operations Operations of Binding "BasicHttpBinding_USCOREIOGService"

  - @ref __ns1__GetGloves

  - @ref __ns1__RefreshGloves

  - @ref __ns1__SaveGlove

  - @ref __ns1__Activate

  - @ref __ns1__Connect

  - @ref __ns1__Disconnect

  - @ref __ns1__ActivateMany

@section BasicHttpBinding_USCOREIOGService_ports Default endpoints of Binding "BasicHttpBinding_USCOREIOGService"

  - http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BasicHttpBinding_USCOREIOGService                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetGloves                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetGloves" of service binding "BasicHttpBinding_USCOREIOGService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/

  - Default SOAP action or REST location path:
    - "http://tempuri.org/IOGService/GetGloves"

  - Addressing input action: "http://tempuri.org/IOGService/GetGloves"

  - Addressing output action: "http://tempuri.org/IOGService/GetGlovesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetGloves(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetGloves*                    ns1__GetGloves,
    // output parameters:
    _ns1__GetGlovesResponse            &ns1__GetGlovesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetGloves(
    struct soap *soap,
    // input parameters:
    _ns1__GetGloves*                    ns1__GetGloves,
    // output parameters:
    _ns1__GetGlovesResponse            &ns1__GetGlovesResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIOGServiceProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIOGServiceService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetGloves SOAP
//gsoap ns1  service method-style:	GetGloves document
//gsoap ns1  service method-encoding:	GetGloves literal
//gsoap ns1  service method-input-action:	GetGloves http://tempuri.org/IOGService/GetGloves
//gsoap ns1  service method-output-action:	GetGloves http://tempuri.org/IOGService/GetGlovesResponse
int __ns1__GetGloves(
    _ns1__GetGloves*                    ns1__GetGloves,	///< Input parameter
    _ns1__GetGlovesResponse            &ns1__GetGlovesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__RefreshGloves                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__RefreshGloves" of service binding "BasicHttpBinding_USCOREIOGService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/

  - Default SOAP action or REST location path:
    - "http://tempuri.org/IOGService/RefreshGloves"

  - Addressing input action: "http://tempuri.org/IOGService/RefreshGloves"

  - Addressing output action: "http://tempuri.org/IOGService/RefreshGlovesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__RefreshGloves(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RefreshGloves*                ns1__RefreshGloves,
    // output parameters:
    _ns1__RefreshGlovesResponse        &ns1__RefreshGlovesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__RefreshGloves(
    struct soap *soap,
    // input parameters:
    _ns1__RefreshGloves*                ns1__RefreshGloves,
    // output parameters:
    _ns1__RefreshGlovesResponse        &ns1__RefreshGlovesResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIOGServiceProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIOGServiceService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	RefreshGloves SOAP
//gsoap ns1  service method-style:	RefreshGloves document
//gsoap ns1  service method-encoding:	RefreshGloves literal
//gsoap ns1  service method-input-action:	RefreshGloves http://tempuri.org/IOGService/RefreshGloves
//gsoap ns1  service method-output-action:	RefreshGloves http://tempuri.org/IOGService/RefreshGlovesResponse
int __ns1__RefreshGloves(
    _ns1__RefreshGloves*                ns1__RefreshGloves,	///< Input parameter
    _ns1__RefreshGlovesResponse        &ns1__RefreshGlovesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveGlove                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveGlove" of service binding "BasicHttpBinding_USCOREIOGService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/

  - Default SOAP action or REST location path:
    - "http://tempuri.org/IOGService/SaveGlove"

  - Addressing input action: "http://tempuri.org/IOGService/SaveGlove"

  - Addressing output action: "http://tempuri.org/IOGService/SaveGloveResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveGlove(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SaveGlove*                    ns1__SaveGlove,
    // output parameters:
    _ns1__SaveGloveResponse            &ns1__SaveGloveResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveGlove(
    struct soap *soap,
    // input parameters:
    _ns1__SaveGlove*                    ns1__SaveGlove,
    // output parameters:
    _ns1__SaveGloveResponse            &ns1__SaveGloveResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIOGServiceProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIOGServiceService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveGlove SOAP
//gsoap ns1  service method-style:	SaveGlove document
//gsoap ns1  service method-encoding:	SaveGlove literal
//gsoap ns1  service method-input-action:	SaveGlove http://tempuri.org/IOGService/SaveGlove
//gsoap ns1  service method-output-action:	SaveGlove http://tempuri.org/IOGService/SaveGloveResponse
int __ns1__SaveGlove(
    _ns1__SaveGlove*                    ns1__SaveGlove,	///< Input parameter
    _ns1__SaveGloveResponse            &ns1__SaveGloveResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Activate                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Activate" of service binding "BasicHttpBinding_USCOREIOGService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/

  - Default SOAP action or REST location path:
    - "http://tempuri.org/IOGService/Activate"

  - Addressing input action: "http://tempuri.org/IOGService/Activate"

  - Addressing output action: "http://tempuri.org/IOGService/ActivateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Activate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Activate*                     ns1__Activate,
    // output parameters:
    _ns1__ActivateResponse             &ns1__ActivateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Activate(
    struct soap *soap,
    // input parameters:
    _ns1__Activate*                     ns1__Activate,
    // output parameters:
    _ns1__ActivateResponse             &ns1__ActivateResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIOGServiceProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIOGServiceService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Activate SOAP
//gsoap ns1  service method-style:	Activate document
//gsoap ns1  service method-encoding:	Activate literal
//gsoap ns1  service method-input-action:	Activate http://tempuri.org/IOGService/Activate
//gsoap ns1  service method-output-action:	Activate http://tempuri.org/IOGService/ActivateResponse
int __ns1__Activate(
    _ns1__Activate*                     ns1__Activate,	///< Input parameter
    _ns1__ActivateResponse             &ns1__ActivateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Connect                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Connect" of service binding "BasicHttpBinding_USCOREIOGService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/

  - Default SOAP action or REST location path:
    - "http://tempuri.org/IOGService/Connect"

  - Addressing input action: "http://tempuri.org/IOGService/Connect"

  - Addressing output action: "http://tempuri.org/IOGService/ConnectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Connect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Connect*                      ns1__Connect,
    // output parameters:
    _ns1__ConnectResponse              &ns1__ConnectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Connect(
    struct soap *soap,
    // input parameters:
    _ns1__Connect*                      ns1__Connect,
    // output parameters:
    _ns1__ConnectResponse              &ns1__ConnectResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIOGServiceProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIOGServiceService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Connect SOAP
//gsoap ns1  service method-style:	Connect document
//gsoap ns1  service method-encoding:	Connect literal
//gsoap ns1  service method-input-action:	Connect http://tempuri.org/IOGService/Connect
//gsoap ns1  service method-output-action:	Connect http://tempuri.org/IOGService/ConnectResponse
int __ns1__Connect(
    _ns1__Connect*                      ns1__Connect,	///< Input parameter
    _ns1__ConnectResponse              &ns1__ConnectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Disconnect                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Disconnect" of service binding "BasicHttpBinding_USCOREIOGService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/

  - Default SOAP action or REST location path:
    - "http://tempuri.org/IOGService/Disconnect"

  - Addressing input action: "http://tempuri.org/IOGService/Disconnect"

  - Addressing output action: "http://tempuri.org/IOGService/DisconnectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Disconnect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Disconnect*                   ns1__Disconnect,
    // output parameters:
    _ns1__DisconnectResponse           &ns1__DisconnectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Disconnect(
    struct soap *soap,
    // input parameters:
    _ns1__Disconnect*                   ns1__Disconnect,
    // output parameters:
    _ns1__DisconnectResponse           &ns1__DisconnectResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIOGServiceProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIOGServiceService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Disconnect SOAP
//gsoap ns1  service method-style:	Disconnect document
//gsoap ns1  service method-encoding:	Disconnect literal
//gsoap ns1  service method-input-action:	Disconnect http://tempuri.org/IOGService/Disconnect
//gsoap ns1  service method-output-action:	Disconnect http://tempuri.org/IOGService/DisconnectResponse
int __ns1__Disconnect(
    _ns1__Disconnect*                   ns1__Disconnect,	///< Input parameter
    _ns1__DisconnectResponse           &ns1__DisconnectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ActivateMany                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ActivateMany" of service binding "BasicHttpBinding_USCOREIOGService".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8733/Design_Time_Addresses/OpenGloveWCF/OGService/

  - Default SOAP action or REST location path:
    - "http://tempuri.org/IOGService/ActivateMany"

  - Addressing input action: "http://tempuri.org/IOGService/ActivateMany"

  - Addressing output action: "http://tempuri.org/IOGService/ActivateManyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ActivateMany(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ActivateMany*                 ns1__ActivateMany,
    // output parameters:
    _ns1__ActivateManyResponse         &ns1__ActivateManyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ActivateMany(
    struct soap *soap,
    // input parameters:
    _ns1__ActivateMany*                 ns1__ActivateMany,
    // output parameters:
    _ns1__ActivateManyResponse         &ns1__ActivateManyResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIOGServiceProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIOGServiceService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCOREIOGServiceService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ActivateMany SOAP
//gsoap ns1  service method-style:	ActivateMany document
//gsoap ns1  service method-encoding:	ActivateMany literal
//gsoap ns1  service method-input-action:	ActivateMany http://tempuri.org/IOGService/ActivateMany
//gsoap ns1  service method-output-action:	ActivateMany http://tempuri.org/IOGService/ActivateManyResponse
int __ns1__ActivateMany(
    _ns1__ActivateMany*                 ns1__ActivateMany,	///< Input parameter
    _ns1__ActivateManyResponse         &ns1__ActivateManyResponse	///< Output parameter
);

/**

@page BasicHttpBinding_USCOREIOGService Binding "BasicHttpBinding_USCOREIOGService"

@section BasicHttpBinding_USCOREIOGService_policy_enablers Policy Enablers of Binding "BasicHttpBinding_USCOREIOGService"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns2 Top-level root elements of schema "http://tempuri.org/Imports"

@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <ns1:GetGloves> @ref _ns1__GetGloves
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetGloves(struct soap*, _ns1__GetGloves*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetGloves(struct soap*, _ns1__GetGloves*);
    @endcode

  - <ns1:GetGlovesResponse> @ref _ns1__GetGlovesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetGlovesResponse(struct soap*, _ns1__GetGlovesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetGlovesResponse(struct soap*, _ns1__GetGlovesResponse*);
    @endcode

  - <ns1:RefreshGloves> @ref _ns1__RefreshGloves
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RefreshGloves(struct soap*, _ns1__RefreshGloves*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RefreshGloves(struct soap*, _ns1__RefreshGloves*);
    @endcode

  - <ns1:RefreshGlovesResponse> @ref _ns1__RefreshGlovesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RefreshGlovesResponse(struct soap*, _ns1__RefreshGlovesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RefreshGlovesResponse(struct soap*, _ns1__RefreshGlovesResponse*);
    @endcode

  - <ns1:SaveGlove> @ref _ns1__SaveGlove
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SaveGlove(struct soap*, _ns1__SaveGlove*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SaveGlove(struct soap*, _ns1__SaveGlove*);
    @endcode

  - <ns1:SaveGloveResponse> @ref _ns1__SaveGloveResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SaveGloveResponse(struct soap*, _ns1__SaveGloveResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SaveGloveResponse(struct soap*, _ns1__SaveGloveResponse*);
    @endcode

  - <ns1:Activate> @ref _ns1__Activate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Activate(struct soap*, _ns1__Activate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Activate(struct soap*, _ns1__Activate*);
    @endcode

  - <ns1:ActivateResponse> @ref _ns1__ActivateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ActivateResponse(struct soap*, _ns1__ActivateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ActivateResponse(struct soap*, _ns1__ActivateResponse*);
    @endcode

  - <ns1:Connect> @ref _ns1__Connect
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Connect(struct soap*, _ns1__Connect*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Connect(struct soap*, _ns1__Connect*);
    @endcode

  - <ns1:ConnectResponse> @ref _ns1__ConnectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ConnectResponse(struct soap*, _ns1__ConnectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ConnectResponse(struct soap*, _ns1__ConnectResponse*);
    @endcode

  - <ns1:Disconnect> @ref _ns1__Disconnect
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Disconnect(struct soap*, _ns1__Disconnect*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Disconnect(struct soap*, _ns1__Disconnect*);
    @endcode

  - <ns1:DisconnectResponse> @ref _ns1__DisconnectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DisconnectResponse(struct soap*, _ns1__DisconnectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DisconnectResponse(struct soap*, _ns1__DisconnectResponse*);
    @endcode

  - <ns1:ActivateMany> @ref _ns1__ActivateMany
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ActivateMany(struct soap*, _ns1__ActivateMany*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ActivateMany(struct soap*, _ns1__ActivateMany*);
    @endcode

  - <ns1:ActivateManyResponse> @ref _ns1__ActivateManyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ActivateManyResponse(struct soap*, _ns1__ActivateManyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ActivateManyResponse(struct soap*, _ns1__ActivateManyResponse*);
    @endcode

@section ns3 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/"

  - <ns3:anyType> (use wsdl2h option -g to auto-generate type _ns3__anyType)

  - <ns3:anyURI> (use wsdl2h option -g to auto-generate type _ns3__anyURI)

  - <ns3:base64Binary> (use wsdl2h option -g to auto-generate type _ns3__base64Binary)

  - <ns3:boolean> (use wsdl2h option -g to auto-generate type _ns3__boolean)

  - <ns3:byte> (use wsdl2h option -g to auto-generate type _ns3__byte)

  - <ns3:dateTime> (use wsdl2h option -g to auto-generate type _ns3__dateTime)

  - <ns3:decimal> (use wsdl2h option -g to auto-generate type _ns3__decimal)

  - <ns3:double> (use wsdl2h option -g to auto-generate type _ns3__double)

  - <ns3:float> (use wsdl2h option -g to auto-generate type _ns3__float)

  - <ns3:int> (use wsdl2h option -g to auto-generate type _ns3__int)

  - <ns3:long> (use wsdl2h option -g to auto-generate type _ns3__long)

  - <ns3:QName> (use wsdl2h option -g to auto-generate type _ns3__QName)

  - <ns3:short> (use wsdl2h option -g to auto-generate type _ns3__short)

  - <ns3:string> (use wsdl2h option -g to auto-generate type _ns3__string)

  - <ns3:unsignedByte> (use wsdl2h option -g to auto-generate type _ns3__unsignedByte)

  - <ns3:unsignedInt> (use wsdl2h option -g to auto-generate type _ns3__unsignedInt)

  - <ns3:unsignedLong> (use wsdl2h option -g to auto-generate type _ns3__unsignedLong)

  - <ns3:unsignedShort> (use wsdl2h option -g to auto-generate type _ns3__unsignedShort)

  - <ns3:char> (use wsdl2h option -g to auto-generate type _ns3__char)

  - <ns3:duration> (use wsdl2h option -g to auto-generate type _ns3__duration)

  - <ns3:guid> (use wsdl2h option -g to auto-generate type _ns3__guid)

@section ns4 Top-level root elements of schema "http://schemas.datacontract.org/2004/07/OpenGloveWCF"

  - <ns4:ArrayOfGlove> (use wsdl2h option -g to auto-generate type _ns4__ArrayOfGlove)

  - <ns4:Glove> (use wsdl2h option -g to auto-generate type _ns4__Glove)

  - <ns4:Glove.Configuration> (use wsdl2h option -g to auto-generate type _ns4__Glove_x002eConfiguration)

  - <ns4:Glove.Configuration.Profile> (use wsdl2h option -g to auto-generate type _ns4__Glove_x002eConfiguration_x002eProfile)

  - <ns4:Side> (use wsdl2h option -g to auto-generate type _ns4__Side)

@section ns5 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

  - <ns5:ArrayOfint> (use wsdl2h option -g to auto-generate type _ns5__ArrayOfint)

  - <ns5:ArrayOfKeyValueOfstringstring> (use wsdl2h option -g to auto-generate type _ns5__ArrayOfKeyValueOfstringstring)

  - <ns5:ArrayOfstring> (use wsdl2h option -g to auto-generate type _ns5__ArrayOfstring)

*/

/* End of myService.h */
